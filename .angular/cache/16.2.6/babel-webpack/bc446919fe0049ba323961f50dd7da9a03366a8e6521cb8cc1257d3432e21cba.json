{"ast":null,"code":"import { HEROES } from './mock-heroes';\nimport { Logger } from '../logger.service';\nimport { UserService } from '../user.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../logger.service\";\nexport class HeroService {\n  constructor(logger, isAuthorized) {\n    this.logger = logger;\n    this.isAuthorized = isAuthorized;\n  }\n  getHeroes() {\n    const auth = this.isAuthorized ? 'authorized ' : 'unauthorized';\n    this.logger.log(`Getting heroes for ${auth} user.`);\n    return HEROES.filter(hero => this.isAuthorized || !hero.isSecret);\n  }\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: function HeroService_Factory(t) {\n      let r = null;\n      if (t) {\n        r = new t();\n      } else {\n        r = ((logger, userService) => new HeroService(logger, userService.user.isAuthorized))(i0.ɵɵinject(Logger), i0.ɵɵinject(UserService));\n      }\n      return r;\n    },\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HEROES","Logger","UserService","HeroService","constructor","logger","isAuthorized","getHeroes","auth","log","filter","hero","isSecret","_","factory","HeroService_Factory","t","r","userService","user","i0","ɵɵinject"],"sources":["/home/kumar007ambi/pp4vq4/src/app/heroes/hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HEROES } from './mock-heroes';\r\nimport { Logger } from '../logger.service';\r\nimport { UserService } from '../user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useFactory: (logger: Logger, userService: UserService) =>\r\n      new HeroService(logger, userService.user.isAuthorized),\r\n  deps: [Logger, UserService],\r\n})\r\nexport class HeroService {\r\n  constructor(\r\n    private logger: Logger,\r\n    private isAuthorized: boolean) { }\r\n\r\n  getHeroes() {\r\n    const auth = this.isAuthorized ? 'authorized ' : 'unauthorized';\r\n    this.logger.log(`Getting heroes for ${auth} user.`);\r\n    return HEROES.filter(hero => this.isAuthorized || !hero.isSecret);\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/"],"mappings":"AACA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,WAAW,QAAQ,iBAAiB;;;AAQ7C,OAAM,MAAOC,WAAW;EACtBC,YACUC,MAAc,EACdC,YAAqB;IADrB,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,YAAY,GAAZA,YAAY;EAAa;EAEnCC,SAASA,CAAA;IACP,MAAMC,IAAI,GAAG,IAAI,CAACF,YAAY,GAAG,aAAa,GAAG,cAAc;IAC/D,IAAI,CAACD,MAAM,CAACI,GAAG,CAAC,sBAAsBD,IAAI,QAAQ,CAAC;IACnD,OAAOR,MAAM,CAACU,MAAM,CAACC,IAAI,IAAI,IAAI,CAACL,YAAY,IAAI,CAACK,IAAI,CAACC,QAAQ,CAAC;EACnE;EAAC,QAAAC,CAAA,G;;;;WATUV,WAAW;IAAAW,OAAA,WAAAC,oBAAAC,CAAA;MAAA,IAAAC,CAAA;MAAA,IAAAD,CAAA;;;YAJV,EAACX,MAAc,EAAEa,WAAwB,KACjD,IAAIf,WAAW,CAACE,MAAM,EAAEa,WAAW,CAACC,IAAI,CAACb,YAAY,CAAC,EAAAc,EAAA,CAAAC,QAAA,CACnDpB,MAAM,GAAAmB,EAAA,CAAAC,QAAA,CAAEnB,WAAW;;;;gBAHd;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}