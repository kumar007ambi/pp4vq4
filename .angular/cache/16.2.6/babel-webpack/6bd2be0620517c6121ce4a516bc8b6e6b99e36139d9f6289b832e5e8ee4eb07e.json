{"ast":null,"code":"import { HeroListComponent } from './heroes/hero-list.component';\nimport * as i0 from \"@angular/core\";\nexport class TestComponent {\n  constructor() {\n    this.results = runTests();\n  }\n  static #_ = this.ɵfac = function TestComponent_Factory(t) {\n    return new (t || TestComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestComponent,\n    selectors: [[\"app-tests\"]],\n    decls: 4,\n    vars: 2,\n    consts: [[\"id\", \"tests\"]],\n    template: function TestComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"Tests\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"p\", 0);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate2(\"Tests \", ctx.results.pass, \": \", ctx.results.message, \"\");\n      }\n    },\n    encapsulation: 2\n  });\n}\n/////////////////////////////////////\nfunction runTests() {\n  const expectedHeroes = [{\n    name: 'A'\n  }, {\n    name: 'B'\n  }];\n  const mockService = {\n    getHeroes: () => expectedHeroes\n  };\n  it('should have heroes when HeroListComponent created', () => {\n    // Pass the mock to the constructor as the Angular injector would\n    const component = new HeroListComponent(mockService);\n    expect(component.heroes.length).toEqual(expectedHeroes.length);\n  });\n  return testResults;\n}\n//////////////////////////////////\n// Fake Jasmine infrastructure\nlet testName;\nlet testResults;\nfunction expect(actual) {\n  return {\n    toEqual: expected => {\n      testResults = actual === expected ? {\n        pass: 'passed',\n        message: testName\n      } : {\n        pass: 'failed',\n        message: `${testName}; expected ${actual} to equal ${expected}.`\n      };\n    }\n  };\n}\nfunction it(label, test) {\n  testName = label;\n  test();\n}","map":{"version":3,"names":["HeroListComponent","TestComponent","constructor","results","runTests","_","_2","selectors","decls","vars","consts","template","TestComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate2","pass","message","expectedHeroes","name","mockService","getHeroes","it","component","expect","heroes","length","toEqual","testResults","testName","actual","expected","label","test"],"sources":["/home/kumar007ambi/pp4vq4/src/app/test.component.ts"],"sourcesContent":["// Simulate a simple test\r\n// Reader should look to the testing chapter for the real thing\r\n\r\nimport { Component } from '@angular/core';\r\n\r\nimport { Hero  } from './heroes/hero';\r\nimport { HeroService } from './heroes/hero.service';\r\nimport { HeroListComponent } from './heroes/hero-list.component';\r\n\r\n@Component({\r\n  selector: 'app-tests',\r\n  template: `\r\n    <h2>Tests</h2>\r\n    <p id=\"tests\">Tests {{results.pass}}: {{results.message}}</p>\r\n  `\r\n})\r\nexport class TestComponent {\r\n  results = runTests();\r\n}\r\n\r\n/////////////////////////////////////\r\nfunction runTests() {\r\n\r\n  const expectedHeroes = [{name: 'A'}, {name: 'B'}];\r\n  const mockService = {getHeroes: () => expectedHeroes } as HeroService;\r\n\r\n  it('should have heroes when HeroListComponent created', () => {\r\n    // Pass the mock to the constructor as the Angular injector would\r\n    const component = new HeroListComponent(mockService);\r\n    expect(component.heroes.length).toEqual(expectedHeroes.length);\r\n  });\r\n\r\n  return testResults;\r\n}\r\n\r\n//////////////////////////////////\r\n// Fake Jasmine infrastructure\r\nlet testName: string;\r\nlet testResults: {pass: string, message: string};\r\n\r\nfunction expect(actual: any) {\r\n  return {\r\n    toEqual: (expected: any) => {\r\n      testResults = actual === expected ?\r\n        {pass: 'passed', message: testName} :\r\n        {pass: 'failed', message: `${testName}; expected ${actual} to equal ${expected}.`};\r\n    }\r\n  };\r\n}\r\n\r\nfunction it(label: string, test: () => void) {\r\n  testName = label;\r\n  test();\r\n}\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/"],"mappings":"AAOA,SAASA,iBAAiB,QAAQ,8BAA8B;;AAShE,OAAM,MAAOC,aAAa;EAP1BC,YAAA;IAQE,KAAAC,OAAO,GAAGC,QAAQ,EAAE;;EACrB,QAAAC,CAAA,G;qBAFYJ,aAAa;EAAA;EAAA,QAAAK,EAAA,G;UAAbL,aAAa;IAAAM,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,uBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QAJtBE,EAAA,CAAAC,cAAA,SAAI;QAAAD,EAAA,CAAAE,MAAA,YAAK;QAAAF,EAAA,CAAAG,YAAA,EAAK;QACdH,EAAA,CAAAC,cAAA,WAAc;QAAAD,EAAA,CAAAE,MAAA,GAA2C;QAAAF,EAAA,CAAAG,YAAA,EAAI;;;QAA/CH,EAAA,CAAAI,SAAA,GAA2C;QAA3CJ,EAAA,CAAAK,kBAAA,WAAAN,GAAA,CAAAX,OAAA,CAAAkB,IAAA,QAAAP,GAAA,CAAAX,OAAA,CAAAmB,OAAA,KAA2C;;;;;;AAO7D;AACA,SAASlB,QAAQA,CAAA;EAEf,MAAMmB,cAAc,GAAG,CAAC;IAACC,IAAI,EAAE;EAAG,CAAC,EAAE;IAACA,IAAI,EAAE;EAAG,CAAC,CAAC;EACjD,MAAMC,WAAW,GAAG;IAACC,SAAS,EAAEA,CAAA,KAAMH;EAAc,CAAiB;EAErEI,EAAE,CAAC,mDAAmD,EAAE,MAAK;IAC3D;IACA,MAAMC,SAAS,GAAG,IAAI5B,iBAAiB,CAACyB,WAAW,CAAC;IACpDI,MAAM,CAACD,SAAS,CAACE,MAAM,CAACC,MAAM,CAAC,CAACC,OAAO,CAACT,cAAc,CAACQ,MAAM,CAAC;EAChE,CAAC,CAAC;EAEF,OAAOE,WAAW;AACpB;AAEA;AACA;AACA,IAAIC,QAAgB;AACpB,IAAID,WAA4C;AAEhD,SAASJ,MAAMA,CAACM,MAAW;EACzB,OAAO;IACLH,OAAO,EAAGI,QAAa,IAAI;MACzBH,WAAW,GAAGE,MAAM,KAAKC,QAAQ,GAC/B;QAACf,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAEY;MAAQ,CAAC,GACnC;QAACb,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAE,GAAGY,QAAQ,cAAcC,MAAM,aAAaC,QAAQ;MAAG,CAAC;IACtF;GACD;AACH;AAEA,SAAST,EAAEA,CAACU,KAAa,EAAEC,IAAgB;EACzCJ,QAAQ,GAAGG,KAAK;EAChBC,IAAI,EAAE;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}