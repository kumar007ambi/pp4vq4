{"ast":null,"code":"import { Car, Engine, Tires } from './car';\nimport { Car as CarNoDi } from './car-no-di';\nimport { CarFactory } from './car-factory';\nimport { testCar, simpleCar, superCar } from './car-creations';\nimport { useInjector } from './car-injector';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./car\";\nexport class CarComponent {\n  constructor(car) {\n    this.car = car;\n    this.factoryCar = new CarFactory().createCar();\n    this.injectorCar = useInjector();\n    this.noDiCar = new CarNoDi();\n    this.simpleCar = simpleCar();\n    this.superCar = superCar();\n    this.testCar = testCar();\n  }\n  static #_ = this.ɵfac = function CarComponent_Factory(t) {\n    return new (t || CarComponent)(i0.ɵɵdirectiveInject(i1.Car));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CarComponent,\n    selectors: [[\"app-car\"]],\n    features: [i0.ɵɵProvidersFeature([Car, Engine, Tires])],\n    decls: 16,\n    vars: 7,\n    consts: [[\"id\", \"di\"], [\"id\", \"nodi\"], [\"id\", \"injector\"], [\"id\", \"factory\"], [\"id\", \"simple\"], [\"id\", \"super\"], [\"id\", \"test\"]],\n    template: function CarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"Cars\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 1);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 2);\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 3);\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 4);\n        i0.ɵɵtext(11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 5);\n        i0.ɵɵtext(13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 6);\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.car.drive());\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.noDiCar.drive());\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.injectorCar.drive());\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.factoryCar.drive());\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.simpleCar.drive());\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.superCar.drive());\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.testCar.drive());\n      }\n    },\n    encapsulation: 2\n  });\n}","map":{"version":3,"names":["Car","Engine","Tires","CarNoDi","CarFactory","testCar","simpleCar","superCar","useInjector","CarComponent","constructor","car","factoryCar","createCar","injectorCar","noDiCar","_","i0","ɵɵdirectiveInject","i1","_2","selectors","features","ɵɵProvidersFeature","decls","vars","consts","template","CarComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","drive"],"sources":["/home/kumar007ambi/pp4vq4/src/app/car/car.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\nimport { Car, Engine, Tires } from './car';\r\nimport { Car as CarNoDi } from './car-no-di';\r\nimport { CarFactory } from './car-factory';\r\n\r\nimport { testCar,\r\n         simpleCar,\r\n         superCar } from './car-creations';\r\n\r\nimport { useInjector } from './car-injector';\r\n\r\n\r\n@Component({\r\n  selector: 'app-car',\r\n  template: `\r\n  <h2>Cars</h2>\r\n  <div id=\"di\">{{car.drive()}}</div>\r\n  <div id=\"nodi\">{{noDiCar.drive()}}</div>\r\n  <div id=\"injector\">{{injectorCar.drive()}}</div>\r\n  <div id=\"factory\">{{factoryCar.drive()}}</div>\r\n  <div id=\"simple\">{{simpleCar.drive()}}</div>\r\n  <div id=\"super\">{{superCar.drive()}}</div>\r\n  <div id=\"test\">{{testCar.drive()}}</div>\r\n  `,\r\n  providers: [Car, Engine, Tires]\r\n})\r\nexport class CarComponent {\r\n  factoryCar  = (new CarFactory()).createCar();\r\n  injectorCar = useInjector();\r\n  noDiCar     = new CarNoDi();\r\n  simpleCar   = simpleCar();\r\n  superCar    = superCar();\r\n  testCar     = testCar();\r\n\r\n  constructor(public car: Car) {}\r\n}\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}